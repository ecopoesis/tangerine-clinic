#Tangerine Clinic

This is an implementation of the Line Server described at https://salsify.github.io/line-server.html

This is a Scala/Play Framework application. If you have Java installed, you should be able to run `activator` to get to the SBT prompt.

##Design

Rather then try to keep all of the source file in memory, Tangerine Clinic uses the Java [Scanner](https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html) class to build an index of the location of all lines. This index is kept as a simple Scala sequence. For loading the actual lines, it uses Java NIO to open a [FileChannel](https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html) and memory map the files. Memory mapping the file is slightly more expensive then using JVM native IO (mostly because of the additional page faults), but has the advantage of not needing to load the entire file into memory.

The rest of the design is just a basic Play application. IoC (via Guice) is used to make unit testing simpler.

##Performance
File size will only affect startup performance while the source file is scanned for line endings. Startup time will scale linearly with file size. Heap size limits

Since the JVM is deferring to OS for IO, the memory-mapped regions are allocated off-heap.